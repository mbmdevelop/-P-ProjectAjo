//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/ProjectAjo/Input/IAA_MainInputActionAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @IAA_MainInputActionAsset: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @IAA_MainInputActionAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""IAA_MainInputActionAsset"",
    ""maps"": [
        {
            ""name"": ""TurnBaseCombat"",
            ""id"": ""46886b17-1e45-4093-8077-0d3416934d1a"",
            ""actions"": [
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""595d38c5-cfd6-45f1-96f3-e72352f6d095"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""55b875ba-c479-4140-99bf-4af737ea6e2d"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94c646a2-ff02-4ffd-b933-f4e4d04ef33b"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": []
        }
    ]
}");
        // TurnBaseCombat
        m_TurnBaseCombat = asset.FindActionMap("TurnBaseCombat", throwIfNotFound: true);
        m_TurnBaseCombat_Cancel = m_TurnBaseCombat.FindAction("Cancel", throwIfNotFound: true);
    }

    ~@IAA_MainInputActionAsset()
    {
        UnityEngine.Debug.Assert(!m_TurnBaseCombat.enabled, "This will cause a leak and performance issues, IAA_MainInputActionAsset.TurnBaseCombat.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TurnBaseCombat
    private readonly InputActionMap m_TurnBaseCombat;
    private List<ITurnBaseCombatActions> m_TurnBaseCombatActionsCallbackInterfaces = new List<ITurnBaseCombatActions>();
    private readonly InputAction m_TurnBaseCombat_Cancel;
    public struct TurnBaseCombatActions
    {
        private @IAA_MainInputActionAsset m_Wrapper;
        public TurnBaseCombatActions(@IAA_MainInputActionAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Cancel => m_Wrapper.m_TurnBaseCombat_Cancel;
        public InputActionMap Get() { return m_Wrapper.m_TurnBaseCombat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TurnBaseCombatActions set) { return set.Get(); }
        public void AddCallbacks(ITurnBaseCombatActions instance)
        {
            if (instance == null || m_Wrapper.m_TurnBaseCombatActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TurnBaseCombatActionsCallbackInterfaces.Add(instance);
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
        }

        private void UnregisterCallbacks(ITurnBaseCombatActions instance)
        {
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
        }

        public void RemoveCallbacks(ITurnBaseCombatActions instance)
        {
            if (m_Wrapper.m_TurnBaseCombatActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITurnBaseCombatActions instance)
        {
            foreach (var item in m_Wrapper.m_TurnBaseCombatActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TurnBaseCombatActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TurnBaseCombatActions @TurnBaseCombat => new TurnBaseCombatActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface ITurnBaseCombatActions
    {
        void OnCancel(InputAction.CallbackContext context);
    }
}
